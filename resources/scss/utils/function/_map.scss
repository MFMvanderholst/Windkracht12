@function first($map) {
  @return nth(map-values($map), 1);
}

@function last($map) {
  @return nth(map-values($map), length(map-values($map)));
}

// @function map.check
// @description Checks if an element is present in multidimensional map.
// @param $map: map
// @param $keys: list
// @return bool
@function check($map, $keys) {
  // Throw an error if $map isn't a map type variable
  @if type-of($map) != 'map' {
    @error 'Function string.explode: The argument $map: `#{$map}` is not a map.';
  }

  // Loop through $keys list variable
  @each $key in $keys {
    @if not map-has-key($map, $key) {
      @return false;
    }

    $map: map-get($map, $key);
  }

  @return true;
}

// @function map.get
// @description Get an element from a multidimensional map.
// @param $map: map
// @param $keys: list
// @return mixed
@function get($map, $keys) {
  @if type-of($map) != 'map' {
    @error 'Function string.explode: The argument $map: `#{$map}` is not a map.';
  }

  @each $key in $keys {
    $map: map-get($map, $key);
  }

  @return $map;
}
